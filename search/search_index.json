{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#create-fastapi-app","title":"Create FastAPI App","text":"<p>Create and manage FastAPI applications</p>"},{"location":"#quick-tour","title":"Quick Tour","text":"<p>Follow these steps to set up a FastAPI project</p>"},{"location":"#installation","title":"Installation","text":"<p>This is a pip package. Thus, the only thing you need to do, is to run:</p> <pre><code>pip install create-fastapi-app\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>To create a new applications at a directory <code>~/my_fastapi_dir</code>, run:</p> <pre><code>cfa create ~/my_fastapi_dir --auth=[none/self/backend]\ncd ~/my_fastapi_dir\n</code></pre> <p>Then install the requirements (expects that you installed pipenv on your system):</p> <pre><code>pipenv shell\npipenv sync --dev\n</code></pre> <p>Initialize the database:</p> <pre><code>sh init_db.sh\n</code></pre> <p>Run the application:</p> <pre><code>python main.py\n</code></pre> <p>Done! You can view the interactivate documentation at localhost:8000/docs </p>"},{"location":"installation/","title":"Installation","text":"<p>tldr</p> <pre><code>pip install create-fastapi-app\n</code></pre> <p>This is a python pip package. Therefore there are some pre-requisites:</p> <ul> <li><code>python</code> &gt;= 3.6</li> <li><code>pip</code></li> </ul> <p>The package installs following dependencies</p> <ul> <li>typer</li> <li>colorama</li> <li>rich</li> <li>shellingham</li> </ul> <p>It is recommended to install the package in a separate virtualenv. E.g.</p> <pre><code>python -m venv cfa_venv\nsource cfa_venv/bin/activate\n</code></pre> <p>To install the package, simply run:</p> <pre><code>pip install create-fastapi-app\n</code></pre>"},{"location":"tutorial/add_model/","title":"add model","text":"<p>tldr</p> <p>For any new model in the <code>app/models</code> dir, run:</p> <pre><code>cfa add-model &lt;model_name&gt; &lt;path_to_model_file&gt;\n</code></pre> <p>to create pydantic schemas and crud</p> <p>FastApi works best with pydantic schemas. These should be created for every model in the database as well as a separate crud class.</p> <p>When creating new model, it can be easy to forget these steps and since they are so repetitive, it is easy to automatize it.</p> <p>When you declare a new SQLAlchemy model in the <code>app/models</code> directory, simply run:</p> <pre><code>cfa add-model &lt;model_name&gt; &lt;path_to_model_file&gt;\n</code></pre> <p>This will generate schemas in the <code>app/schemas</code> directory, update the <code>app/schemas/__init__.py</code> file and create a crud class in <code>app/crud</code> directory.</p>"},{"location":"tutorial/app_structure/","title":"App structure","text":"<p>tldr</p> <pre><code>\ud83d\udce6fastapi-app\n \u2523 \ud83d\udcc2app\n \u2503 \u2523 \ud83d\udcc2api - endpoints\n \u2503 \u2523 \ud83d\udcc2core - configurations\n \u2503 \u2523 \ud83d\udcc2crud - crud\n \u2503 \u2523 \ud83d\udcc2database - database session and base class\n \u2503 \u2523 \ud83d\udcc2models - SQLAlchemy models\n \u2503 \u2523 \ud83d\udcc2schemas - Pydantic schemas\n \u2503 \u2523 \ud83d\udcc2tests - pytest tests\n  ...\n</code></pre> <p>When you run the cfa create command with auth <code>none</code> or <code>backend</code> options, a following file tree will be created:</p> <pre><code>\ud83d\udce6fastapi-app\n \u2523 \ud83d\udcc2app\n \u2503 \u2523 \ud83d\udcc2api\n \u2503 \u2503 \u2523 \ud83d\udcc2v1\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcc2endpoints\n \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdc__init__.py\n \u2503 \u2503 \u2503 \u2503 \u2517 \ud83d\udcdcitem.py\n \u2503 \u2503 \u2503 \u2517 \ud83d\udcdc__init__.py\n \u2503 \u2503 \u2523 \ud83d\udcdc__init__.py\n \u2503 \u2503 \u2517 \ud83d\udcdcdeps.py\n \u2503 \u2523 \ud83d\udcc2core\n \u2503 \u2503 \u2523 \ud83d\udcdc__init__.py\n \u2503 \u2503 \u2517 \ud83d\udcdcconfig.py\n \u2503 \u2523 \ud83d\udcc2crud\n \u2503 \u2503 \u2523 \ud83d\udcdc__init__.py\n \u2503 \u2503 \u2523 \ud83d\udcdcbase.py\n \u2503 \u2503 \u2523 \ud83d\udcdccrud_example.py\n \u2503 \u2503 \u2517 \ud83d\udcdccrud_item.py\n \u2503 \u2523 \ud83d\udcc2database\n \u2503 \u2503 \u2523 \ud83d\udcdc__init__.py\n \u2503 \u2503 \u2523 \ud83d\udcdcbase.py\n \u2503 \u2503 \u2523 \ud83d\udcdcinitialize.py\n \u2503 \u2503 \u2517 \ud83d\udcdcsession.py\n \u2503 \u2523 \ud83d\udcc2models\n \u2503 \u2503 \u2523 \ud83d\udcdc__init__.py\n \u2503 \u2503 \u2523 \ud83d\udcdcexample.py\n \u2503 \u2503 \u2517 \ud83d\udcdcitem.py\n \u2503 \u2523 \ud83d\udcc2schemas\n \u2503 \u2503 \u2523 \ud83d\udcdc__init__.py\n \u2503 \u2503 \u2523 \ud83d\udcdcexample.py\n \u2503 \u2503 \u2517 \ud83d\udcdcitem.py\n \u2503 \u2523 \ud83d\udcc2tests\n \u2503 \u2503 \u2523 \ud83d\udcc2api\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcc2v1\n \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdc__init__.py\n \u2503 \u2503 \u2503 \u2503 \u2517 \ud83d\udcdctest_item.py\n \u2503 \u2503 \u2503 \u2517 \ud83d\udcdc__init__.py\n \u2503 \u2503 \u2523 \ud83d\udcdc__init__.py\n \u2503 \u2503 \u2517 \ud83d\udcdcconftest.py\n \u2503 \u2517 \ud83d\udcdc__init__.py\n \u2523 \ud83d\udcc2git_hooks\n \u2503 \u2523 \ud83d\udcdcpre-commit.sh\n \u2503 \u2517 \ud83d\udcdcpre-push.sh\n \u2523 \ud83d\udcdc.gitignore\n \u2523 \ud83d\udcdcDockerfile\n \u2523 \ud83d\udcdcPipfile\n \u2523 \ud83d\udcdcPipfile.lock\n \u2523 \ud83d\udcdcREADME.md\n \u2523 \ud83d\udcdccreate_git_hooks.sh\n \u2523 \ud83d\udcdcdb.db\n \u2523 \ud83d\udcdcdocker-compose.yml\n \u2523 \ud83d\udcdcenv_example\n \u2523 \ud83d\udcdcinit_db.sh\n \u2517 \ud83d\udcdcmain.py\n</code></pre> <p>auth = <code>self</code> adds and updates several files:</p> <pre><code>\ud83d\udce6fastapi-app\n \u2523 \ud83d\udcc2app\n \u2503 \u2523 \ud83d\udcc2api\n \u2503 \u2503 \u2523 \ud83d\udcc2v1\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcc2endpoints\n \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdc__init__.py\n \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdcauth.py\n \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdcitem.py\n \u2503 \u2503 \u2503 \u2503 \u2517 \ud83d\udcdcuser.py\n \u2503 \u2503 \u2503 \u2517 \ud83d\udcdc__init__.py\n \u2503 \u2503 \u2523 \ud83d\udcdc__init__.py\n \u2503 \u2503 \u2517 \ud83d\udcdcdeps.py\n \u2503 \u2523 \ud83d\udcc2core\n \u2503 \u2503 \u2523 \ud83d\udcdc__init__.py\n \u2503 \u2503 \u2517 \ud83d\udcdcconfig.py\n \u2503 \u2523 \ud83d\udcc2crud\n \u2503 \u2503 \u2523 \ud83d\udcdc__init__.py\n \u2503 \u2503 \u2523 \ud83d\udcdcbase.py\n \u2503 \u2503 \u2523 \ud83d\udcdccrud_item.py\n \u2503 \u2503 \u2517 \ud83d\udcdccrud_user.py\n \u2503 \u2523 \ud83d\udcc2database\n \u2503 \u2503 \u2523 \ud83d\udcdc__init__.py\n \u2503 \u2503 \u2523 \ud83d\udcdcbase.py\n \u2503 \u2503 \u2523 \ud83d\udcdcinitialize.py\n \u2503 \u2503 \u2517 \ud83d\udcdcsession.py\n \u2503 \u2523 \ud83d\udcc2models\n \u2503 \u2503 \u2523 \ud83d\udcdc__init__.py\n \u2503 \u2503 \u2523 \ud83d\udcdcitem.py\n \u2503 \u2503 \u2517 \ud83d\udcdcuser.py\n \u2503 \u2523 \ud83d\udcc2schemas\n \u2503 \u2503 \u2523 \ud83d\udcdc__init__.py\n \u2503 \u2503 \u2523 \ud83d\udcdcauth.py\n \u2503 \u2503 \u2523 \ud83d\udcdcitem.py\n \u2503 \u2503 \u2517 \ud83d\udcdcuser.py\n \u2503 \u2523 \ud83d\udcc2tests\n \u2503 \u2503 \u2523 \ud83d\udcc2api\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcc2v1\n \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdc__init__.py\n \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdctest_item.py\n \u2503 \u2503 \u2503 \u2503 \u2517 \ud83d\udcdctest_user.py\n \u2503 \u2503 \u2503 \u2517 \ud83d\udcdc__init__.py\n \u2503 \u2503 \u2523 \ud83d\udcdc__init__.py\n \u2503 \u2503 \u2517 \ud83d\udcdcconftest.py\n \u2503 \u2523 \ud83d\udcdc__init__.py\n \u2503 \u2517 \ud83d\udcdcutils.py\n \u2523 \ud83d\udcdc.gitignore\n \u2523 \ud83d\udcdcDockerfile\n \u2523 \ud83d\udcdcPipfile\n \u2523 \ud83d\udcdcPipfile.lock\n \u2523 \ud83d\udcdcREADME.md\n \u2523 \ud83d\udcdccreate_git_hooks.sh\n \u2523 \ud83d\udcdcdocker-compose.yml\n \u2523 \ud83d\udcdcenv_example\n \u2523 \ud83d\udcdcinit_db.sh\n \u2517 \ud83d\udcdcmain.py\n</code></pre>"},{"location":"tutorial/app_structure/#_1","title":"./","text":"<p>Place for some general files, environment files and other configurations</p>"},{"location":"tutorial/app_structure/#appapi","title":"./app/api/","text":"<p>Folder where endpoints should be specified. E.g. to create a new endpoint for table. All endpoints related to a single table should be grouped in the same file, and the router should be then included in the <code>./app/api/v1/__init__.py</code> file.  </p>"},{"location":"tutorial/app_structure/#appcore","title":"./app/core/","text":"<p>A place for app configurations</p>"},{"location":"tutorial/app_structure/#appcrud","title":"./app/crud/","text":"<p>Crud classes utilizing models and schemas for a table in the database. Each crud class should inherit from the CRUDBase class which contains some basic methods for:</p> <ul> <li>creating (<code>create(db, obj_in)</code>)</li> <li>reading (<code>read(db, item_id)</code>, <code>read_multi(db, offset, limit)</code>)</li> <li>updating (<code>update(db, item_id, obj_in)</code>)</li> <li>deleting (<code>delete(db, item_id)</code>)</li> </ul> <p>objects in the database</p>"},{"location":"tutorial/app_structure/#appdatabase","title":"./app/database/","text":"<p>Database base class <code>base.py</code>, which is inherited by the models, and session (<code>session.py</code>). The <code>initialize.py</code> contains db initialization scripts useful for development. However, in production the tables and migrations should be handled ideally by alembic</p>"},{"location":"tutorial/app_structure/#appmodels","title":"./app/models/","text":"<p>Database tables models. Simple classes that inherit from the base class specifying the columns, datatypes, indexes, foreign keys etc. For more info see SQLAlchemy docs</p>"},{"location":"tutorial/app_structure/#appschemas","title":"./app/schemas/","text":"<p>pydantic schemas declaring data validation. Schemas are used for database manipulations (create, read, update) as well as for validating requests and specifying response schemas. E.g. imagine we would like to add a post endpoint for creating new items in the database (in  the <code>./app/api/v1/endpoints/item.py</code> file). It would look something like this:</p> <pre><code>@router.post('/', response_model=schemas.Item)\ndef get_items(\nobj_in: schemas.ItemCreate,\ndb: Session = Depends(deps.get_db)\n) -&gt; Any:\nreturn crud_item.create(db=db, obj_in=obj_in)\n</code></pre> <p>In the first line, we specify the schema of the json object that will be returned to the user. In the third line, we specify what we expect. If the incoming object does not correspond with the schema, the endpoint will throw an Error.</p>"},{"location":"tutorial/app_structure/#apptests","title":"./app/tests/","text":"<p>Tests. See pytest for more info. In short, you simply write functions (with the word test in their names - this is very important) in a file with the word test in its name and then include some assertions inside of the functions. Running the command pytest will detect all these functions and run them.</p> <p>For example to test if <code>GET item</code> endpoint works, simply create a file <code>./app/tests/api/v1/test_item.py</code> with following content:</p> <pre><code>from fastapi.testclient import TestClient\nfrom app.core.config import settings\ndef test_item_get_multi(client: TestClient) -&gt; None:\n\"\"\"Test the get items endpoint\"\"\"\nr = client.get(f\"{settings.API_VERSION}/item/\")\nassert r.status_code == 200\nall_runs = r.json()\nassert len(all_runs) &gt; 0\n</code></pre> <p>There are some configurations already in place. See the <code>app/tests/conftest.py</code> for more info. You should be fine with the default settings. For more info see the official documentation</p>"},{"location":"tutorial/create_app/","title":"Create app","text":"<p>tldr</p> <pre><code>cfa create /path/to/app --auth=[none/self/backend]\n</code></pre> <p>Once you installed the application, create a new app is easy. Simply call:</p> <pre><code>cfa create /path/to/app\n</code></pre> <p>and replace the <code>/path/to/app</code> to a destination where you want your app to reside.</p>"},{"location":"tutorial/create_app/#auth","title":"Auth","text":"<p>The app can be initialized in three ways in terms of <code>auth</code>:</p> <ul> <li><code>none</code> - no auth (default)</li> <li> <p><code>self</code> - self-managed auth</p> <pre><code>cfa create ~/my_fastapi_dir --auth=self\n</code></pre> <p>Will create a <code>users</code> table and auth mechanisms for authorizing requests</p> </li> <li> <p><code>backend</code> - auth managed by other backend</p> <pre><code>cfa create ~/my_fastapi_dir --auth=backend\n</code></pre> <p>Will create a logic for authorizing requests via external backend API. Remember to set the <code>BACKEND_URL</code> env var, as well as the <code>GET_USER_BY_TOKEN_ENDPOINT</code> env variable.</p> <p>When trying to authorize, by default the app will call an endpoint at <code>http://{BACKEND_URL}/{GET_USER_BY_TOKEN_ENDPOINT}/{token}</code>. Make sure to have this endpoint and it returns a user object (with name, surname, email, etc)</p> </li> </ul>"},{"location":"tutorial/create_app/#git","title":"Git","text":"<p>By default, when running the <code>cfa create ...</code> script, a git repo will be initialized in the target directory. If you wish to suppress this option, supply the <code>--no-git-init</code> flag.</p>"},{"location":"tutorial/deployment/","title":"Deployment","text":"<p>tldr</p> <pre><code>docker build -t &lt;image_name&gt;\ndocker run &lt;image_name&gt; -p &lt;port&gt;:8000 --env-file .env\n</code></pre> <p>or </p> <pre><code>docker-compose up\n</code></pre>"},{"location":"tutorial/deployment/#dockerfile","title":"Dockerfile","text":"<p>To build a docker image, simply run:</p> <pre><code>docker build -t &lt;image_name&gt; .\n</code></pre> <p>Then to run the application:</p> <pre><code>docker run &lt;image_name&gt; -p &lt;port&gt;:8000 --env-file .env\n</code></pre> <p>Make sure that the database is running and your <code>.env</code> file contains correct connection string.</p>"},{"location":"tutorial/deployment/#docker-compose","title":"docker-compose","text":"<p>If you wish to start the app as well as the database, use the <code>docker-compose.yml</code> file. Make sure that your <code>.env</code> file contains following variables:</p> <ul> <li><code>MARIADB_USERNAME</code> - sql username</li> <li><code>MARIADB_PASSWORD</code> - sql user password</li> <li><code>DB_NAME</code> - name of the database</li> <li><code>DB_DATA</code> - absolute path to where the database data should be saved</li> <li><code>SQLALCHEMY_DATABASE_URI</code> equal to <code>mysql+pymysql://$MARIADB_USERNAME:$MARIADB_PASSWORD@db:3306/$DB_NAME</code></li> </ul> <p>To run the application, simply run:</p> <pre><code>docker-compose up\n</code></pre>"},{"location":"tutorial/introduction/","title":"Introduction","text":"<p>tldr</p> <p><code>cfa</code> aims to create an oppinionated way to develop FastAPI applications, achieving faster development, better code readability and fewer code mistakes</p>"},{"location":"tutorial/introduction/#what-is-this","title":"What is this?","text":"<p>Just a project template. In teams with lots and lots of projects, it is easy to lose track of how projects are configured. Code readability should be valued and one way of achieving this is to set some standards.</p> <p>This project does just that. It creates a working FastAPI template ready to use with sql databases. The <code>cfa create</code> script will automatically initialize a git repo for you, create app file structure, include working (and relatively small) <code>Dockerfile</code>, <code>docker-compose</code> and optional script for creating git hooks.</p>"},{"location":"tutorial/introduction/#why-should-i-use-it","title":"Why should I use it?","text":"<p>I am not forcing you to do so. And I am not even saying that this is the best way to use FastAPI. However, we found that this template works well and have created lots of projects based on it.</p> <p>You should not reinvent the wheel. Your time is more valuable </p>"}]}